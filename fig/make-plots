#!/usr/bin/env python3

import argparse

import numpy as np
from scipy.optimize import curve_fit
from scipy import optimize
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.ticker as tick
from matplotlib import lines
from matplotlib import patches
from matplotlib import ticker
from matplotlib.gridspec import GridSpec
from matplotlib.colors import LinearSegmentedColormap
from random import randint
import husl
import colorsys
import h5py
import functools
import glob

aspect = 1/1.618
resolution = 72.27
paperwidth = 364.19536/resolution
paperheight = 273.14662/resolution
textwidth = 307.28987/resolution
textheight = 262.45619/resolution
columnwidth = 0.5*textwidth
textiny, texsmall, texnormal = 5.6, 6.475, 7.0
offblack = '#262626'
grey = '0.88'
outer_band = dict(color='.92')
inner_band = dict(color=plt.cm.Blues(.32))
inner_line = dict(color=plt.cm.Blues(.77))

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'sans-serif',
    'font.sans-serif': ['Roboto'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'sans',
    'mathtext.it': 'sans:italic:medium',
    'mathtext.cal': 'sans', 
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .6,
    'lines.markersize': 2,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .6,
    'axes.linewidth': .4,
    'xtick.major.width': .4,
    'ytick.major.width': .4,
    'xtick.minor.width': .4,
    'ytick.minor.width': .4,
    'xtick.major.size': 1,
    'ytick.major.size': 1,
    'xtick.minor.size': 0.6,
    'ytick.minor.size': 0.6,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 42,
})

plot_functions = {}


def plot(f):
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()

    plot_functions[f.__name__] = wrapper

    return wrapper


def finish(despine=True, remove_ticks=False, pad=0.1, h_pad=None, w_pad=None,
           rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)


def set_loc(ax, xy=None, nbins=5, steps=[1, 2, 3, 4, 10],
            prune=None, minor=0):
    if xy == 'x':
        axes = ax.xaxis,
    elif xy == 'y':
        axes = ax.yaxis,
    else:
        axes = ax.xaxis, ax.yaxis

    for axis in axes:
        axis.set_major_locator(
            tick.MaxNLocator(nbins=nbins, steps=steps, prune=prune)
        )
        if minor:
            axis.set_minor_locator(tick.AutoMinorLocator(minor))


def fmt_tick(n):
    s = str(float(n))
    if abs(n) > 10 and s.endswith('.0'):
        return s[:-2]
    return s


def desaturate(color, fraction=0.5):
    h, l, s = colorsys.rgb_to_hls(*color[:3])
    return colorsys.hls_to_rgb(h, l, fraction*s)


def gen_mean(x, y, p):
    #x, y = npart(x, y, 6.4)
    if abs(p) < 1e-9:
        return np.sqrt(x * y)
    else:
        return (((x + 1e-12)**p + (y + 1e-12)**p)/2)**(1/p)


def kln(x, y):
    #x, y = npart(x, y, 6.4)
    Qs2_min = np.minimum(x, y)
    Qs2_max = np.maximum(x, y)
    arg = Qs2_max/(Qs2_min + 1e-12)
    return Qs2_min*(2 + np.log(arg + 1e-12))/2


def ekrt_gen():
    K, beta, pmin = 0.64, 0.8, 1.

    a = (-0.0044020 + 0.0220154*K - 0.0005974*beta
         + 0.0125320*K*beta - 0.0032844*beta**2 - 0.0033841*K**2)
    b = (0.8537670 - 0.0580163*K + 0.0957157*beta
         - 0.0016413*K*beta - 0.1788390*beta**2 + 0.0220187*K**2)
    C = (3.9027590 - 0.6277216*K + 1.0703962*beta
         + 0.0692793*K*beta - 1.9808449*beta**2 + 0.1106879*K**2)
    n = (0.1312476 - 0.0157637*K - 0.0362980*beta
         - 0.0022506*K*beta + 0.0615129*beta**2 + 0.0052116*K**2)

    def inner(x, y):
        psat = np.array(C*(a + x*y)**n - b*C*a**n)
        e0 = (K/np.pi) * psat**3
        s0 = e0**(3/4)
        return s0

    return inner

ekrt = ekrt_gen()

def wn(x, y):
    sigma = 6.4
    NA = x*(1 - np.exp(-sigma*y))
    NB = y*(1 - np.exp(-sigma*x))
    return (NA + NB)/2

def pfit(model):

    def func(T, p, norm):
        TA, TB = T
        return norm*np.ravel(gen_mean(TA, TB, p))

    T = np.linspace(0, 4, 100)
    TA, TB = np.meshgrid(T, T)

    popt, pcov = curve_fit(func, np.meshgrid(T, T), np.ravel(model(TA, TB)))
    p, norm = popt

    return [round(p, 2), round(norm, 5)]


def fobj(T, NA, NB, sigma):
    P1 = T[0]*(1 - np.exp(-sigma*T[1])) - NA
    P2 = T[1]*(1 - np.exp(-sigma*T[0])) - NB
    return P1**2 + P2**2


def thick(NA, NB, sigma):
    return optimize.minimize(fobj, [NA, NB], args=(NA, NB, sigma)).x

def npart(TA, TB, sigma):
    return [TA*(1 - np.exp(-sigma*TB)), TB*(1 - np.exp(-sigma*TA))]

@plot
def cgc_compare():
    fig, axes = plt.subplots(
        ncols=3, figsize=(textwidth, 0.55*columnwidth), sharey=True
    )

    labels = ['KLN', 'EKRT', 'WN']
    functions = [kln, ekrt, lambda x, y: (x + y)/2]
    pvals = [pfit(kln), [0, 1.09], [1, 1]]
    #pvals = [pfit(kln), pfit(ekrt), [1, 1]]
    TB = [1, 2, 3]

    for ax, (p, norm), func, label in zip(axes, pvals, functions, labels):
        X = np.linspace(0, 4, 1000)
        for Y in TB:
            ax.plot(X, norm*gen_mean(X, Y, p), lw=0.8, color=plt.cm.Blues(0.6),
                 label='Gen. mean, $p={}$'.format(p) if Y == 1 else '')

            ax.plot(X, func(X, Y), lw=0.8, dashes=(4, 3),
                 color='0.25', label=label if Y == 1 else '')

        offsets = [2.2, 2.8, 3.4]
        labels = ['${:d}$', '${:d}$', r'$\tilde{{T}}_B={}$']

        if ax == axes[2]:
            [ax.text(4, func(4, Y) + 0.05, label.format(int(Y)) + ' fm$^{-2}$',
                     ha='right', va='baseline', rotation=18)
             for Y, offset, label in zip(TB, offsets, labels)]

        ax.set_xlim(0, 4)
        ax.set_xticks([0, 1, 2, 3, 4])
        ax.set_xlabel(r'$\tilde{T}_A$ [fm$^{-2}$]')
        ax.set_ylim(0, 4)
        ax.set_yticks([0, 1, 2, 3])

        handles, labels = ax.get_legend_handles_labels()
        ax.legend(handles, labels, bbox_to_anchor=(-.01, 1.05),
                  loc=2, handlelength=1.2, handletextpad=.6)

    axes[0].set_ylabel(r'Entropy density [fm$^{-3}$]')

    finish(pad=0)

@plot
def thickness():
    plt.figure(figsize=(columnwidth, aspect*columnwidth))

    X = np.linspace(-9, 9, 361)
    TA = np.loadtxt('data/thickness/PbPb_TA.dat')[:, 180]
    TB = np.loadtxt('data/thickness/PbPb_TB.dat')[:, 180]
    Tmin = np.minimum(TA, TB)
    Tmax = np.maximum(TA, TB)

    blue = plt.cm.Blues(0.6)
    dark_blue = plt.cm.Blues(0.7)

    plt.fill_between(X, Tmin, Tmax, lw=0, color=grey, zorder=0,
                     label=r'$T_\mathrm{min} < T < T_\mathrm{max}$')
    plt.fill_between(X, gen_mean(TA, TB, -1), gen_mean(TA, TB, 1),
                     color=blue, lw=0, alpha=0.4, label=r'$-1<p<1$')
    plt.plot(X, gen_mean(TA, TB, 0), color=dark_blue, label='$p=0$')

    plt.xlim(-8.5, 8.5)
    plt.xticks(np.linspace(-8, 8, 9))
    plt.xlabel(r'$x$ [fm]')
    plt.ylim(0, 5)
    plt.yticks([0, 2, 4])
    plt.ylabel(r'Thickness [fm$^{-2}$]')

    handles, labels = plt.gca().get_legend_handles_labels()
    handles = handles[1], handles[2], handles[0]
    labels = labels[1], labels[2], labels[0]
    plt.legend(handles, labels, labelspacing=0.4,
               handletextpad=0.4, markerfirst=False,
               bbox_to_anchor=(1.03, 1.05))
    plt.annotate('Pb+Pb 2.76 TeV', xy=(0.02, 0.985), va='top', color=offblack,
                 xycoords='axes fraction')

    finish()


def split_cent_bins(array, bin_edges):
    """
    Split an array into chunks for each centrality bin. The
    array must already be sorted by centrality along its first axis.

    """
    for a, b in zip(bin_edges[:-1], bin_edges[1:]):
        i, j = (int(array.shape[0]*c/100) for c in (a, b))
        yield array[i:j]


@plot
def nch_per_npart():
    plt.figure(figsize=(columnwidth, aspect*columnwidth))

    clow, chigh, alice_nch, alice_error = \
        np.loadtxt('data/nch_per_npart/ALICE_PbPb_5.02.dat',
                   usecols=(0, 1, 2, 3)).T
    bin_edges = np.append(clow, chigh[-1:])

    trento_data = np.loadtxt('data/nch_per_npart/PbPb.dat', usecols=(2, 3))
    npart, nch = trento_data[trento_data[:, 1].argsort()[::-1]].T
    trento_npart = np.array(
        [bin.mean() for bin in split_cent_bins(npart, bin_edges)])
    trento_nch = np.array(
        [bin.mean() for bin in split_cent_bins(nch, bin_edges)])
    norm = alice_nch[5]/trento_nch[5]

    plt.plot(trento_npart, norm*trento_nch/(trento_npart/2),
             zorder=1, color=plt.cm.Blues(0.6), label='Pb+Pb')
    plt.errorbar(trento_npart, alice_nch/(trento_npart/2),
                 yerr=alice_error/(trento_npart/2), fmt='o', capsize=0,
                 color=offblack, mew=0, zorder=2, label='Pb+Pb')

    npart, nch = np.loadtxt('data/nch_per_npart/pPb.dat', usecols=(2, 3)).T
    plt.errorbar(npart.mean(), norm*nch.mean()/(npart.mean()/2), fmt='s',
                 capsize=0, zorder=1, mec=plt.cm.Blues(0.6), mfc='white',
                 mew=1, label=r'p+Pb')
    plt.errorbar(npart.mean(), 16.81/(npart.mean()/2),
                 yerr=0.71/(npart.mean()/2), fmt='s', capsize=0,
                 color=offblack, mew=0, zorder=2, label='p+Pb')

    plt.xlim(-20, 420)
    plt.xticks(np.arange(0, 500, 100))
    plt.xlabel(r'$N_\mathrm{part}$')
    plt.ylim(3, 11)
    plt.yticks(np.arange(4, 12, 2))
    plt.ylabel('$(dN_\mathrm{ch}/d\eta) / (N_\mathrm{part} / 2)$')

    handles, labels = plt.gca().get_legend_handles_labels()
    alice_handles = handles[1], handles[3]
    alice_labels = labels[1], labels[3]
    trento_handles = handles[0], handles[2]
    trento_labels = labels[0], labels[2]
    first_legend = plt.legend(alice_handles, alice_labels,
                              bbox_to_anchor=(0.74, 0.4), handlelength=0.8,
                              columnspacing=1.5, title='ALICE')
    first_legend.get_title().set_fontsize(textiny)
    plt.gca().add_artist(first_legend)
    second_legend = plt.legend(trento_handles, trento_labels,
                               bbox_to_anchor=(1, 0.4), handlelength=0.8,
                               columnspacing=1.5, title='TRENTO')
    second_legend.get_title().set_fontsize(textiny)
    plt.text(15, 10, '$\sqrt{s_{NN}}$ = 5.02 TeV')

    finish()


def _zetas(T, Tc=0.180,
           A1=-13.77, A2=27.55, A3=13.45,
           lam1=0.9, lam2=0.25, lam3=0.9, lam4=0.22,
           sig1=0.025, sig2=0.13, sig3=0.0025, sig4=0.022):
    t = np.asarray(T)/Tc
    zetas = np.empty_like(t)

    low = t < 0.995
    xm1 = t[low] - 1
    zetas[low] = lam3*np.exp(xm1/sig3) + lam4*np.exp(xm1/sig4) + 0.03

    high = t > 1.05
    xm1 = t[high] - 1
    zetas[high] = lam1*np.exp(-xm1/sig1) + lam2*np.exp(-xm1/sig2) + 0.001

    mid = ~(low | high)
    x = t[mid]
    zetas[mid] = A1*x*x + A2*x - A3

    return zetas


@plot
def validation():
    calibration = 'data/bayesian/calibration/results_err10.hdf'
    batch_obs_validation = \
        'data/bayesian/model/batch-observables-validation.hdf'

    observables = [
        ('dN_dy/pion', r'$dN/dy_{\pi^\pm}$', (0, 3500)),
        ('mean_pT/pion', r'$\langle p_T \rangle_{\pi^\pm}$', (0.4, 0.75)),
        ('vn/2', r'$v_2\{2\}$', (0, 0.13)),
    ]

    cent_edges = [0, 5, 10, 20, 30, 40, 50, 60, 70, 80]
    cent_bins = list(zip(cent_edges[:-1], cent_edges[1:]))

    fig, axes = plt.subplots(ncols=len(observables),
                             figsize=(textwidth, 1.1*textwidth/3))

    with \
            h5py.File(calibration, 'r') as cal, \
            h5py.File(batch_obs_validation, 'r') as vld:
        for (key, label, lim), ax in zip(observables, axes):
            for i, cmap in (0, 'Blues'), (4, 'Oranges'):
                x = cal['validation'][key]['Y'][:, i]
                xerr = cal['validation'][key]['Yerr'][:, i]
                y = vld[key]['Y'][:, i]
                yerr = vld[key]['Yerr'][:, i]
                ax.errorbar(
                    x, y, xerr=xerr, yerr=yerr, fmt='o', capsize=0,
                    color=getattr(plt.cm, cmap)(0.8), mec='white', mew=0.3,
                    label='–'.join(map(str, cent_bins[i])) + '%'
                )
            ax.plot(lim, lim, color='.7', zorder=-10)
            ax.set_xlim(lim)
            ax.set_ylim(lim)
            ax.set_aspect('equal')
            ax.set_xlabel('Predicted ' + label)
            if ax.is_first_col():
                ax.set_ylabel('Observed')
                ax.legend(loc='best')
            set_loc(ax)

    finish()


@plot
def observables_plot():
    id_parts = [
        ('pion',   r'$\pi^{\!\pm}$', 'Blues'),
        ('kaon',   r'$K^{\!\pm}$', 'Greens'),
        ('proton', r'$p\bar p$', 'Reds')
    ]

    flows = [(str(n), '$v_{}$'.format(n), c)
             for n, c in enumerate(['GnBu', 'Purples', 'Oranges'], start=2)]

    plots = [
        ('dN_dy', 'Yields $dN/dy$', r'$dN/dy$', (1, 4e3), id_parts),
        ('mean_pT', 'Mean $p_T$ [GeV]', r'$p_T$ [GeV]', (0, 1.8), id_parts),
        ('vn', 'Flow cumulants $v_n\{2\}$', r'$v_n\{2\}$', (0, 0.12), flows),
    ]

    prior_data = 'data/bayesian/model/batch-observables.hdf'
    post_data = 'data/bayesian/calibration/results_err10.hdf'
    exp_data = 'data/bayesian/exp/data.hdf'

    fig, axes = plt.subplots(nrows=2, ncols=3,
                             figsize=(textwidth, 1.6*aspect*columnwidth))

    for axes_row, model_data, posterior in zip(
            axes, [prior_data, post_data], [False, True]
    ):
        model = h5py.File(model_data, 'r')
        exp = h5py.File(exp_data, 'r')

        if posterior:
            samples = np.random.randint(0, model['chain'].shape[0], size=100)

        for ax, (obs, title, ylabel, ylim, subplots) in zip(axes_row, plots):
            for subobs, label, cmap in subplots:
                color = desaturate(getattr(plt.cm, cmap)(0.55), 0.8)

                n = 6 if obs == 'vn' and subobs != '2' else 8

                x, y, yerr = (exp[obs][subobs][k][:n]
                              for k in ['x', 'y', 'yerr'])

                ax.errorbar(x, y, yerr=yerr, fmt='o',
                            capsize=0, color=offblack, mfc=offblack,
                            mew=0, zorder=1000)

                ax.text(x[-1] + 2, y[-1], label, ha='left', va='center',
                        color=offblack, size=texnormal)

                kwargs = dict(color=color, lw=0.4)

                if posterior:
                    for i in samples:
                        ax.plot(x, model['samples'][obs][subobs][i],
                                alpha=0.15, **kwargs)
                else:
                    for y in model[obs][subobs]['Y'][:, :n]:
                        ax.plot(x, y, alpha=0.12, **kwargs)

            ax.set_xlim([0, 75])
            ax.set_ylim(ylim)
            if obs == 'dN_dy':
                ax.set_ylabel('Posterior samples'
                              if posterior else 'Training data')
            # ax.set_ylabel(ylabel, position=(0,1), ha='right',
            #              va='baseline', labelpad=5)

            if posterior:
                ax.set_xlabel('Centrality %')
            else:
                ax.set_title(title)
                ax.xaxis.set_ticklabels([])

            if obs == 'dN_dy':
                ax.set_yscale('log')
                ax.minorticks_off()
            else:
                set_loc(ax, 'y', nbins=4,
                        steps=[0, 2, 3, 4, 5, 6, 8, 9, 10],
                        prune='upper')

    finish(h_pad=0, w_pad=0.3)

    
@plot
def posterior():

    plt.rcParams.update({
        'font.family': 'sans-serif',
        'font.sans-serif': ['Roboto Condensed'],
    })

    with h5py.File('data/bayesian/model/design.hdf', 'r') as f:
        labels = list(f['labels'])
        etas_hrg_index = 4
        indices = np.arange(len(labels)) != etas_hrg_index
        del labels[etas_hrg_index]
        labels[5] += '$^\dagger$'
        ranges = np.array(f['range'])[indices]
        # reset upper limit for norm
        ranges[0, 1] = 160

    def load_chains():
        for arg in ['', '_dNch_deta_only']:
            with h5py.File('data/bayesian/calibration/results_err10{}.hdf'
                           .format(arg), 'r') as f:
                yield np.array(f['chain']).T[indices]

    chains = list(load_chains())

    nxy = chains[0].shape[0]
    assert nxy == len(labels)

    def recolor(rgb):
        h, s, l = husl.rgb_to_husl(*rgb)
        return husl.husl_to_rgb(h, .75*s, min(1.02*l, 100))

    cmaps = [
        plt.cm.Blues,
        LinearSegmentedColormap.from_list(
            'Reds_mod',
            [recolor(rgba[:3]) for rgba in plt.cm.Reds(np.linspace(0, 1, 9))]
        ),
    ]

    assert len(cmaps) == len(chains)

    Tswitch_index = 7

    fig, axes = plt.subplots(
        nrows=nxy, ncols=nxy,
        sharex='col', sharey='row',
        figsize=(0.95*paperheight, 0.95*paperheight)
    )

    for n, (ax, lim) in enumerate(zip(axes.diagonal(), ranges)):
        counts, edges = zip(*[
            np.histogram(c[n], bins=100, range=lim, density=True)
            for c in chains
        ])

        assert np.allclose(edges[0], edges[1])
        edges = edges[0]
        x = (edges[1:] + edges[:-1]) / 2

        cmax = max(c.max() for c in counts)

        for c, cmap in zip(counts, cmaps):
            y = .84 * (lim[1] - lim[0]) * c / cmax + lim[0]
            ax.plot(x, y, color=cmap(.8))
            ax.fill_between(
                x, lim[0], y, color=cmap(.5, alpha=0.2), zorder=-10
            )

        ticks = (
            [0.14, 0.15, 0.16]
            if n == Tswitch_index else
            [lim[0], (lim[0] + lim[1])/2, lim[1]]
        )

        def fmt_tick(n):
            s = str(float(n))
            if abs(n) > 10 and s.endswith('.0'):
                return s[:-2]
            return s

        for xy in ['x', 'y']:
            getattr(ax, 'set_{}lim'.format(xy))(lim)
            getattr(ax, 'set_{}ticks'.format(xy))(ticks)
            getattr(ax, 'set_{}ticklabels'.format(xy))(
                [fmt_tick(i) for i in ticks]
            )

    for nyx in zip(*np.tril_indices_from(axes, k=-1)):
        for c, cmap, (ny, nx) in zip(chains, cmaps, [nyx, reversed(nyx)]):
            H, xedges, yedges = np.histogram2d(
                c[nx], c[ny], bins=100, range=(ranges[nx], ranges[ny])
            )
            H[H == 0] = None
            axes[ny][nx].pcolorfast(xedges, yedges, H.T, cmap=cmap)

    for n, (label, lim) in enumerate(zip(labels, ranges)):
        axes[-1][n].set_xlabel(label, fontsize=6)
        axes[n][0].set_ylabel(label, fontsize=6)
        yaxis = axes[n][0].get_yaxis()
        yaxis.set_label_coords(-0.5, 0.5)
        ylabel = axes[n][0].get_yaxis().get_label()
        ylabel.set_rotation_mode('anchor')
        ylabel.set_va('baseline')

        for t, justify in zip(axes[-1][n].xaxis.get_major_ticks(),
                              ['left', 'center', 'right']):
            if n != Tswitch_index:
                t.label1.set_horizontalalignment(justify)
            t.label1.set_fontsize(4.8)
        for t, justify in zip(axes[n][0].yaxis.get_major_ticks(),
                              ['bottom', 'center', 'top']):
            if n != Tswitch_index:
                t.label1.set_verticalalignment(justify)
            t.label1.set_fontsize(4.8)

    finish(pad=0, h_pad=0.05, w_pad=0.05, rect=[0., 0., 1, 1])


def posterior_(nobs, title):
    
    with h5py.File('data/bayesian/model/design.hdf', 'r') as f:
        labels = list(f['labels'])
        etas_hrg_index = 4
        indices = np.arange(len(labels)) != etas_hrg_index
        del labels[etas_hrg_index]
        labels[5] += '$^\dagger$'
        ranges = np.array(f['range'])[indices]
        # reset upper limit for norm
        ranges[0, 1] = 160

    with h5py.File('data/bayesian/calibration/results_err10.hdf', 'r') as f:
        chain = np.array(f['chain']).T[indices]

    fig = plt.figure(figsize=(1.1*columnwidth, 1.1*aspect*columnwidth))
    
    lim = ranges[nobs]

    counts, edges = np.histogram(chain[nobs], bins=100, range=lim, density=True)
    x = (edges[1:] + edges[:-1]) / 2
    cmax = max(c.max() for c in counts)
    y = counts
    plt.plot(x, y, color=plt.cm.Blues(.8))
    plt.fill_between(
        x, 0, y, color=plt.cm.Blues(.5, alpha=0.2), zorder=-10
    )

    plt.ylim(0, 1.3*cmax)
    plt.xlabel(labels[nobs], fontsize=8)
    plt.tick_params(axis='x', labelsize=8)
    plt.gca().get_yaxis().set_visible(False)
    plt.gca().spines['left'].set_visible(False)
    plt.suptitle(title, fontsize=8, y=0.95)

    finish(pad=0.2)

@plot
def posterior_k():
    posterior_(2, "Proton multiplicity fluctuations")

@plot
def posterior_w():
    posterior_(3, "Nucleon width")

@plot
def posterior_etamin():
    posterior_(4, "Shear viscosity minimum")

@plot
def posterior_etaslope():
    posterior_(5, "Shear viscosity slope")

@plot
def posterior_zeta():
    posterior_(6, "Bulk viscosity normalization")

@plot
def posterior_Tsw():
    posterior_(7, "Hydro-to-UrQMD switching temp.")

@plot
def mode_observables(**kwargs):
    batch_obs_list = ['data/bayesian/model/batch-observables-mode.hdf',
                      'data/bayesian/model/batch-observables-mode-dNch_deta.hdf']
    exp_data = 'data/bayesian/exp/data.hdf'

    id_parts_id = [
        ('pion',   r'$\pi^{\!\pm}$', desaturate(plt.cm.Blues(.6), .8)),
        ('kaon',   r'$K^{\!\pm}$', desaturate(plt.cm.Greens(.6), .8)),
        ('proton', r'$p\bar p$', desaturate(plt.cm.Reds(.6), .8))
    ]

    id_parts_int = [
        ('none', r'$N_\mathrm{ch} \times 5$', '0.4')
    ]

    flows = [(str(n), '$v_{}$'.format(n), c)
                for n, c in enumerate([desaturate(plt.cm.GnBu(.6), .8),
                                    desaturate(plt.cm.Purples(.6), .8),
                                    desaturate(plt.cm.Oranges(.6), .8)
                                    ], start=2)]

    labelinfo = [
        ((2.5, 4800), (2.5, 800), (2.5, 40)),
        ((2.5, 31000),),
        ((2.5, 0.45), (2.5, 0.8), (2.5, 1.25)),
        ((72, 0.06), (47, 0.035), (47, 0.021)),
    ]

    dashes_list = (), (4,2)

    fig = plt.figure(figsize=(textwidth, 1.2*aspect*columnwidth))
    gs = plt.GridSpec(12, 3)

    for m, (batch_obs_mode, dashes) in enumerate(zip(batch_obs_list, dashes_list)):

        plots = [
            ('dN_dy', 'Yields $dN/dy$, $dN_\mathrm{ch}/d\eta$', r'$dN/dy$', (1,
                                                                             4e4),
             id_parts_id, labelinfo[0]) if m == 0 else
            ('dNch_deta', 'Yields $dN/dy$', r'$dN_\mathrm{ch}/deta$', (1, 4e4),
             id_parts_int, labelinfo[1]),
            ('mean_pT', 'Mean $p_T$ [GeV]',
             r'$p_T$ [GeV]', (0, 1.5), id_parts_id, labelinfo[2]),
            ('vn', 'Flow cumulants $v_n\{2\}$', r'$v_n\{2\}$', (0, 0.11),
             flows, labelinfo[3]),
        ]

        with \
                h5py.File(batch_obs_mode, 'r') as mode, \
                h5py.File(exp_data, 'r') as exp:
            for n, (obs, title, ylabel,
                    ylim, subplots, labelpos) in enumerate(plots):
                ax = fig.add_subplot(gs[:8, n])
                ratio_ax = fig.add_subplot(gs[8:, n])

                ax.set_xlim(0, 76)
                ax.set_ylim(ylim)
                if m == 0:
                    ax.set_title(title)

                for (subobs, label, color), labelxy in zip(subplots, labelpos):

                    if subobs == 'none':
                        ncent = min(i[obs]['x'].size for i in [mode, exp])
                        x = mode[obs]['x'][:ncent]
                        y = mode[obs]['Y'][0, :ncent]
                        yexp, yexperr = (exp[obs][k][:ncent]
                                         for k in ['y', 'yerr'])
                    else:
                        ncent = min(i[obs][subobs]['x'].size for i in [mode, exp])
                        x = mode[obs][subobs]['x'][:ncent]
                        y = mode[obs][subobs]['Y'][0, :ncent]
                        yexp, yexperr = (exp[obs][subobs][k][:ncent]
                                         for k in ['y', 'yerr'])

                    if obs == 'dNch_deta':
                        for y_ in [y, yexp, yexperr]:
                            y_ *= 5

                    ax.plot(x, y, color=color, dashes=dashes)
                    ax.errorbar(x, yexp, yerr=yexperr, fmt='o',
                                mfc=offblack, mew=0, capsize=0,
                                color=offblack, zorder=1000)

                    if (m == 0) or (n == 0) :
                        ax.text(labelxy[0], labelxy[1], label, ha='left', va='top',
                                size=texnormal)

                    ratio_ax.plot(x, y/yexp, color=color, dashes=dashes)

                if (obs == 'dN_dy') or (obs == 'dNch_deta'):
                    ax.set_yscale('log')
                    ax.minorticks_off()
                else:
                    set_loc(ax, 'y', nbins=4)
                ax.get_xaxis().set_ticklabels([])

                ratio_ax.axhline(1, color='0.4', lw=0.5, zorder=-100)
                ratio_ax.axhspan(0.9, 1.1, color=grey, alpha=0.7, zorder=-200)

                ratio_ax.set_xlabel('Centrality %')
                ratio_ax.set_ylim(0.8, 1.2)
                ratio_ax.set_yticks([0.8, 1, 1.2])
                ratio_ax.set_ylabel('Model/Exp' if n is 0 else '', labelpad=4)
                ratio_ax.set_xlim(0, 76)

    fig.axes[0].annotate('solid: identified\ndashed: charged', xy=(1,0.8), ha='right',
                         multialignment='left', xycoords='axes fraction', fontsize=textiny)
    #fig.axes[2].annotate('dashed: integrated', xy=(0.1,0.1),
    #                     xycoords='axes fraction', fontsize=textiny)
    finish(pad=0.2, h_pad=0, w_pad=0.3)


@plot
def posterior_p_arrows(n=1, **kwargs):
    design = 'data/bayesian/model/design.hdf'
    calibration = 'data/bayesian/calibration/results_err10.hdf'

    with h5py.File(design, 'r') as f:
        label = f['labels'][n]
        lim = f['range'][n]

    with h5py.File(calibration, 'r') as f:
        chain = f['chain'][:, n]

    fig = plt.figure(figsize=(1.1*columnwidth, 1.1*aspect*columnwidth))
    ax = fig.gca()

    counts, edges = np.histogram(chain, bins=100, range=lim)
    x = (edges[1:] + edges[:-1]) / 2
    y = counts / counts.max()
    ax.plot(x, y, color=plt.cm.Blues(0.8))
    ax.fill_between(x, y, color=plt.cm.Blues(0.15), zorder=-10,
                    label='Posterior')
    ax.plot(np.linspace(-1, 1, 2), -1*np.ones(2), color=offblack,
            label=r'dS/dy')

    ax.set_xlabel(label, labelpad=2, fontsize=8)

    for spine in ax.spines.values():
        spine.set_visible(False)

    # KLN model
    ax.text(-0.67, 0.05, 'KLN', fontsize=8, va='bottom', ha='center')
    ax.plot([-0.68, -0.66], [0, 0], lw=4, color=offblack, alpha=0.6,
            label='KLN', clip_on=False)

    # EKRT model
    ax.text(0, 0.05, 'EKRT', fontsize=8, va='bottom', ha='center')
    ax.plot([-0.1, 0.1], [0, 0], lw=4, color=offblack, alpha=0.6,
            label='EKRT', clip_on=False)

    # WN model
    ax.text(1, 0.05, 'WN', fontsize=8, va='bottom', ha='center')
    ax.scatter(1, 0, s=10, color=offblack, clip_on=False)

    ax.set_xticks(np.arange(-10, 11, 5)/10)
    ax.set_xticks(np.arange(-75, 76, 50)/100, minor=True)
    ax.set_xticklabels(['-1.0', '-0.5', '0.0', '0.5', '1.0'], y=-0.02, fontsize=8)

    xm = 1.15
    ax.set_xlim(-xm, xm)
    ax.add_artist(
        patches.FancyArrowPatch(
            (-xm, 0), (xm, 0),
            linewidth=0.8,
            arrowstyle=patches.ArrowStyle.CurveFilledAB(
                head_length=3, head_width=1.5
            ),
            facecolor=offblack, edgecolor=offblack,
            clip_on=False, zorder=100
        )
    )

    ax.set_yticks([])
    ax.set_ylim(0, 1.3*y.max())
    plt.suptitle('Entropy deposition parameter', fontsize=8, y=0.95)

    finish(despine=False, pad=0.2)


def credible_interval(samples, ci=.9):
    """
    Compute the HPD credible interval (default 90%) for an array of samples.
    The array will be sorted in place.

    """
    samples.sort()

    # number of intervals to compute
    nci = int((1 - ci)*samples.size)

    # find highest posterior density (HPD) credible interval
    # i.e. the one with minimum width
    cil = samples[:nci]   # interval lows
    cih = samples[-nci:]  # interval highs
    ihpd = np.argmin(cih - cil)

    return cil[ihpd], cih[ihpd]


@plot
def etas_estimate(calibration='data/bayesian/calibration/results_err10.hdf'):
    plt.figure(figsize=(1.1*columnwidth, 1.1*aspect*columnwidth))
    ax = plt.axes()

    T = np.linspace(.154, .3, 50)
    dT = T - T[0]

    prior = ax.fill_between(T, .3 + 2*dT, **outer_band)

    with h5py.File(calibration, 'r') as f:
        etas_min, etas_slope = f['chain'][:, 5:7].T

    intervals = np.array([
        credible_interval(etas_min + dT_*etas_slope)
        for dT_ in dT
    ]).T

    band = ax.fill_between(T, *intervals, **inner_band)

    ax.plot(T, np.full_like(T, 1/(4*np.pi)), color='.6')
    ax.text(.299, .07, r'KSS bound $1/4\pi$', va='top', ha='right',
            color='.4', fontsize=textiny)

    median, = ax.plot(
        T, np.median(etas_min) + dT*np.median(etas_slope),
        **inner_line
    )

    ax.set_xlim(xmin=.146)
    ax.set_xticks(np.arange(150, 301, 50)/1000)
    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator(2))
    set_loc(ax, 'y', minor=2)

    ax.set_xlabel('Temperature [GeV]')
    ax.set_ylabel(r'$\eta/s$')

    ax.legend(*zip(*[
        (prior, 'Prior range'),
        (median, 'Posterior median'),
        (band, '90% CI'),
    ]), loc='upper left', bbox_to_anchor=[0, 1.06])

    finish(pad=0.2)


@plot
def trento_events():
    fig, axes = plt.subplots(2, 2, sharex=True, sharey=True,
                             figsize=(columnwidth, columnwidth))

    x = np.linspace(-10, 10, 400)
    lim = (-8, 8)
    ticks = np.linspace(-5, 5, 3)

    cdict = cm.get_cmap('Blues')._segmentdata
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    for ax, iev in zip(axes.flat, [67, 56, 20, 43]):
        with h5py.File('data/trento/events.hdf', 'r') as f:
            ev = f['event_{}'.format(iev)]
            profile = np.array(ev)
            cs = ax.pcolorfast(x, x, profile, zorder=-100, cmap=my_cmap)
            cs.set_clim(0.0, np.max(profile))
            properties = \
                '$N_{}$$=${}\n$b$$=${:.1f} fm'.format(r'\mathrm{part}',
                                                      ev.attrs['npart'],
                                                      ev.attrs['b'])
            ax.annotate(properties, xy=(0.99, 0.99), xycoords='axes fraction',
                        ha='right', va='top', fontsize=textiny)

        for xy in ['x', 'y']:
            getattr(ax, 'set_{}lim'.format(xy))(lim)
            getattr(ax, 'set_{}ticks'.format(xy))(ticks)
        if ax.is_last_row():
            ax.set_xlabel('$x$ [fm]')
        if ax.is_first_col():
            ax.set_ylabel('$y$ [fm]')

    finish(w_pad=0.3, h_pad=0.3)


@plot
def trento_minbias():
    fig, axes = plt.subplots(6, 8, sharex=True, sharey=True,
                             figsize=(paperwidth, paperheight))
    cmap = plt.cm.Blues(np.linspace(0 , 1, 20))
    cmap[0] = [1, 1, 1, 1]
    my_cmap = LinearSegmentedColormap.from_list('my_cmap', cmap)

    for iev, ax in enumerate(axes.flat):
        with h5py.File('events/minbias.hdf', 'r') as f:
            ev = f['event_{}'.format(iev + 1)]
            profile = np.array(ev)
            cs = ax.imshow(profile, zorder=-100, cmap=my_cmap)
            cs.set_clim(0.0, np.max(profile))
            ax.set_xticks([])
            ax.set_yticks([])

    finish(w_pad=0.3, h_pad=0.3)


@plot
def ipglasma():
    fig, (ax1, ax2) = \
        plt.subplots(2, 1, figsize=(columnwidth, 1.8*aspect*columnwidth),
                     sharex=True)

    # Event properties for IP-Glasma & Trento samples
    models = ['data/ipglasma/ipglasma.dat']
    models.extend(glob.glob('data/ipglasma/trento-samples/*.dat'))

    for (i, f) in enumerate(models):

        # plot style
        if i == 0:
            color = plt.cm.Oranges(0.4)
            alpha = 1
            lw = 1
            zorder = 2
            dashes = (4, 2)
        else:
            color = plt.cm.Blues(0.6)
            alpha = 0.4
            lw = 0.4
            zorder = 1
            dashes = []

        # load model results
        b, mult, e2, e3 = np.loadtxt(f, usecols=(1, 3, 4, 5)).T
        if i > 0:
            mult *= 5.1

        # impact parameter bins
        edges = np.linspace(0, 16, 16)

        # plot multiplicity
        mult = np.array([mult[(lo < b) & (b < hi)].mean()
                         for lo, hi in zip(edges[:-1], edges[1:])])

        if i == 0:
            norm = mult[2]

        ax1.plot((edges[:-1] + edges[1:])/2, norm*mult/mult[2], color=color, lw=lw,
                 alpha=alpha, dashes=dashes, zorder=zorder)

        # plot eccentricity
        e2, e3 = [[np.nanmean(en[(lo < b) & (b < hi)])
                   for lo, hi in zip(edges[:-1], edges[1:])]
                  for en in [e2, e3]]
        ax2.plot((edges[:-1] + edges[1:])/2, e2, color=color, lw=lw,
                 alpha=alpha, dashes=dashes, zorder=zorder)
        ax2.plot((edges[:-1] + edges[1:])/2, e3, color=color, lw=lw,
                 alpha=alpha, dashes=dashes, zorder=zorder)

    ax1.set_ylim(0, 2500)
    ax1.set_yticks([0, 500, 1000, 1500, 2000, 2500])
    ax1.set_ylabel('$dN_\mathrm{ch}/d\eta$')
    ax1.set_title('Multiplicity', y=0.9)
    ipglasma_handle = lines.Line2D([], [], dashes=(4, 2), color='0.7')
    ipglasma_label = r'IP-Glasma$\vert_{\tau=0.4\mathrm{\ fm/c}}}$'
    trento_handle = lines.Line2D([], [], lw=1, color=plt.cm.Blues(0.6))
    trento_label = r'Trento & F.S.$\vert_{\tau=0.4\mathrm{\ fm/c}}}$'
    ax1.legend([ipglasma_handle, trento_handle],
               [ipglasma_label, trento_label],
               bbox_to_anchor=(1.05, 0.875), handlelength=1.8)
    ax1.text(1, 250, r'$\sqrt{s_{NN}} = 2.76$ TeV')

    ax2.set_xlim(0, 16)
    ax2.set_xticks([0, 4, 8, 12, 16])
    ax2.set_yticks([0, 0.2, 0.4, 0.6])
    ax2.set_ylim(0, 0.7)
    ax2.set_xlabel('$b$ [fm]')
    ax2.set_ylabel(r'$\varepsilon_n$')
    ax2.set_title('Eccentricity', y=0.9)
    ax2.text(11, 0.6, r'$\varepsilon_2$')
    ax2.text(11, 0.36, r'$\varepsilon_3$')

    finish(h_pad=1)

@plot
def schematic():
    fig = plt.figure(figsize=(0.9*textwidth, 0.48*textwidth))
    gs = GridSpec(4, 6)
    ax1 = fig.add_subplot(gs[:4,:2]) 
    ax2 = fig.add_subplot(gs[:2,2:4])
    ax3 = fig.add_subplot(gs[2:,2:4], sharex=ax2) 
    ax4 = fig.add_subplot(gs[:4,4:])
    axes = ax1, ax2, ax3, ax4

    # plot nucleons
    def plt_nucleons(ax):
        ax.scatter(nuclA[:,0], nuclA[:,1], s=20, facecolors='none', lw=0.2, alpha=0.2, edgecolors = offblack, zorder=1)
        ax.scatter(nuclB[:,0], nuclB[:,1], s=20, facecolors='none', lw=0.2, alpha=0.2, edgecolors = offblack, zorder=1)
    
    # load collision data
    nucl = np.loadtxt("data/trento/participants.dat")
    nuclA = nucl[(nucl[:,2] >= 0) & (nucl[:,3] == 1)]
    nuclB = nucl[(nucl[:,2] >= 0) & (nucl[:,3] == 2)]
    partA = nucl[(nucl[:,2] > 0) & (nucl[:,3] == 1)]
    partB = nucl[(nucl[:,2] > 0) & (nucl[:,3] == 2)]
    
    # plot participants
    plt_nucleons(ax1)
    ax1.annotate(r'1)', xy=(-10,8.5), ha='left', va='top', xycoords='data', fontsize=texnormal)

    for i in range(len(partA)):
        z = randint(1,1000)
        ax1.scatter(partA[i,0], partA[i,1], s=20, facecolors=plt.cm.Blues(0.5), edgecolors='w', lw=0.2, alpha=0.8, zorder=z)
    for i in range(len(partB)):
        z = randint(1,1000)
        ax1.scatter(partB[i,0], partB[i,1], s=20, facecolors=plt.cm.Oranges(0.5), edgecolors='w', lw=0.2, alpha=0.8, zorder=z)
    
    # plot thickness functions
    plt_nucleons(ax2) 
    cmap = plt.cm.Oranges
    cmap.set_under('white')
    TB = np.fliplr(np.loadtxt('data/trento/TB.dat')).T
    ax2.imshow(TB, extent=(-9,9,-9,9), cmap=cmap, vmin=0.2)
    ax2.annotate(r'2) $T_A$', xy=(-10,8.75), ha='left', va='top', xycoords='data', fontsize=texnormal)
    ax2.get_xaxis().set_visible(False)
    ax2.spines['bottom'].set_visible(False)
    
    plt_nucleons(ax3) 
    cmap = plt.cm.Blues
    cmap.set_under('white')
    TA = np.fliplr(np.loadtxt('data/trento/TA.dat')).T
    ax3.imshow(TA, aspect='equal', extent=(-9,9,-9,9), cmap=cmap, vmin=0.2)
    ax3.annotate(r'2) $T_B$', xy=(-10,8.75), ha='left', va='top', xycoords='data', fontsize=texnormal)

    plt_nucleons(ax4) 
    cmap = plt.cm.Greens
    cmap.set_under('white')
    TR = np.fliplr(np.loadtxt('data/trento/TR.dat')).T
    ax4.imshow(TR, aspect='equal', extent=(-9,9,-9,9), cmap=cmap, vmin=0.2)
    ax4.annotate(r'3) $dS/dy$', xy=(-10,8.75), ha='left', va='top', xycoords='data', fontsize=texnormal)
    
    # global fig properties
    for ax in axes:
        ax.set_aspect('equal')
        ax.set_xlim(-12,12)
        ax.set_ylim(-9, 9)
        ax.set_xticks([-10, -5, 0, 5, 10])
        ax.set_yticks([-5, 0, 5])
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        ax.xaxis.set_ticks_position('bottom')
        ax.yaxis.set_ticks_position('left')
        if ax is not ax1:
            ax.get_yaxis().set_visible(False)
        if ax is ax2:
            ax.get_yaxis().set_visible(False)
            

    plt.subplots_adjust(hspace=0, wspace=0)
    ax1.set_xlabel(r'$x$ $[\mathrm{fm}]$')
    ax1.set_ylabel(r'$y$ $[\mathrm{fm}]$')
    ax3.set_xlabel(r'$x$ $[\mathrm{fm}]$')
    ax4.set_xlabel(r'$x$ $[\mathrm{fm}]$')
    plt.tight_layout(h_pad=0, w_pad=0, pad=0.1) 

@plot
def mapping():
    fig = plt.figure(figsize=(0.9*columnwidth, 1.2*columnwidth))
    gs = GridSpec(7, 5)
    ax1 = fig.add_subplot(gs[:2,:])
    ax2 = fig.add_subplot(gs[2:,:], sharex=ax1)
    ax1.set_xlim(0, 5)
    ax1.set_ylim(0, 3.2)
    ax1.get_xaxis().set_visible(False)
    ax1.get_yaxis().set_visible(False)
    ax1.spines['bottom'].set_visible(False)
    ax1.spines['left'].set_visible(False)
    def collision(xy, n, m, marker, color, size):
        n_list = np.linspace(0, .3*(n-1), n)
        n_list -= (n_list[-1] + .6)
        m_list = np.linspace(0, .3*(m-1), m) + .6
        x_list = np.concatenate((n_list + xy[0], m_list + xy[0]))
        nucleons = [patches.Ellipse(xy=(x, xy[1]), width=0.3, height=0.6, facecolor=plt.cm.Blues(.4), edgecolor=offblack) for x in x_list]
        for nucleon in nucleons:
            ax1.add_artist(nucleon)

        ax1.scatter(xy[0] - 2, xy[1], marker=marker, edgecolors='none', c=color, s=size)
        ax1.arrow(xy[0] - 0.38, xy[1], 0.2, 0, head_width=0.1, head_length=0.1, shape='full', fc=offblack, ec=offblack) 
        ax1.arrow(xy[0] + 0.38, xy[1], -0.2, 0, head_width=0.1, head_length=0.1, shape='full', fc=offblack, ec=offblack) 
   
    collision((2.5, 2.8), 2, 2, '^', plt.cm.Reds(.5), 21) 
    collision((2.5, 2), 4, 4, 'D', plt.cm.Greens(.5), 15) 
    collision((2.5, 1.2), 1, 2, 's', plt.cm.Purples(.5), 15) 
    collision((2.5, .4), 1, 4, '+', plt.cm.Oranges(.5), 21) 
    
    TA = np.linspace(0, 5, 10)
    ax2.plot(TA, TA, color='0.6', dashes=(4, 2))
    ax2.plot(TA, 5 - TA, color='0.6', dashes=(4, 2))
    ax2.text(3.0, 3.6, r'symmetric', va='center', ha='center', rotation=45.5, color='0.6', fontsize=8)
    ax2.text(3.6, 1.9, r'asymmetric', va='center', ha='center', rotation=-45.2, color='0.6', fontsize=8)

    ax2.scatter(2, 2, marker='^', c=plt.cm.Reds(.5), edgecolors='none', s=21)
    ax2.scatter(4, 4, marker='D', c=plt.cm.Greens(.5), edgecolors='none', s=15)
    ax2.scatter(1, 2, marker='s', c=plt.cm.Purples(.5), edgecolors='none', s=15)
    ax2.scatter(1, 4, marker='+', c=plt.cm.Oranges(.5), edgecolors='none', s=21)

    ax2.set_xlim(0, 5)
    ax2.set_ylim(0, 5)
    ax2.set_xlabel('Thickness $T_A$')
    ax2.set_ylabel('Thickness $T_B$')
    ax2.set_aspect('equal')
    finish()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
